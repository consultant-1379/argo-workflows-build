#
# COPYRIGHT Ericsson 2022
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: 2.0

description: "AI/ML Pipeline Build Tasks"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
    - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java11mvnbuilder:${env.MVN_BUILDER_TAG}
    - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
    - adp-image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:${env.IMAGE_DR_CHECK_TAG}
    - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:${env.HELM_DR_CHECK_TAG}
    - adp-go-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-gobuilder.adp-base-os:${env.GO_BUILDER_TAG}
    - ci-toolkit: armdocker.rnd.ericsson.se/proj-mxe-ci-internal/ci-toolkit:${env.CI_TOOLKIT_TAG}

import:
    common: common-properties.yaml

properties:
    - disabled-images-design-rules: "-DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable"
    # Reports
    - dr-checkers-report-path: build/checker-reports
    - image-checker-report-path: ${dr-checkers-report-path}/image
    - argowf-version: v3.5.8
    - argowf-repo-url: ssh://gerrit-gamma.gic.ericsson.se:29418/MXE/mlops-3pps/argo-workflows
    - ml-pipeline-repo-url: ssh://gerrit-gamma.gic.ericsson.se:29418/MXE/ml-pipeline
    - ml-pipeline-path: .bob/ml-pipeline
    - ml-pipeline-version: master
    - changed-files: ${env.PWD}/.bob/changed-files.txt
    - stdout-redirect-version: 1.38.0
    - stdout-redirect-package-url: https://arm.seli.gic.ericsson.se/artifactory/proj-adp-log-release/com/ericsson/bss/adp/log/stdout-redirect/${stdout-redirect-version}/eric-log-libstdout-redirect-golang-cxa30176-${stdout-redirect-version}.x86_64.tar
    - minio_mc_version: "RELEASE.2023-10-24T21-42-22Z"

    # image UIDs generated using images/uid.sh
    - argoexec-user-id : 198958
    - argocli-user-id : 287624
    - workflow-controller-user-id : 287276
    - init-user-id: 149129

    - docker-bake-params : |
        CBO_VERSION=\"${common.common-base-os-version}\"
        VERSION=\"${var.version}\"
        COMMIT=\"${var.commithash}\"
        RSTATE=\"${var.rstate}\"
        PWD=\"${env.PWD}\"
        BUILD_DATE=\"${var.image-build-date}\"

        GIT_COMMIT=\"${var.git-commit}\"
        GIT_TAG=\"${var.git-tag}\"
        GIT_TREE_STATE=\"${var.git-tree-state}\"

        NODE_VERSION=\"${common.node-version}\"
        NPM_VERSION=\"${common.npm-version}\"
        YARN_VERSION=\"${common.yarn-version}\"
        
        ARGO_WORKFLOW_VERSION=\"${argowf-version}\"
        ARGO_WORKFLOW_BUILD_CONTEXT=\"${common.argowf-path}\"

        WORKFLOW_CONTROLLER_IMAGE_PRODUCT_NUMBER=\"${common.argocontroller-image-product-number}\"
        WORKFLOW_CONTROLLER_IMAGE_PRODUCT_TITLE=\"${common.docker-image-title} Argo Workflow Controller\"
        WORKFLOW_CONTROLLER_IMAGE_NAME_INTERNAL=\"${var.image-full-name-internal}-workflow-controller:${var.version}\"
        WORKFLOW_CONTROLLER_IMAGE_NAME=\"${var.image-full-name}-workflow-controller:${var.version}\"
        WORKFLOW_CONTROLLER_USER_ID=\"${workflow-controller-user-id}\"

        WORKFLOW_EXECUTOR_IMAGE_PRODUCT_NUMBER=\"${common.argoexec-image-product-number}\"
        WORKFLOW_EXECUTOR_IMAGE_PRODUCT_TITLE=\"${common.docker-image-title} Argo Workflow Executor\"
        WORKFLOW_EXECUTOR_IMAGE_NAME_INTERNAL=\"${var.image-full-name-internal}-argoexec:${var.version}\"
        WORKFLOW_EXECUTOR_IMAGE_NAME=\"${var.image-full-name}-argoexec:${var.version}\"
        WORKFLOW_EXECUTOR_USER_ID=\"${argoexec-user-id}\"

        ARGO_CLI_IMAGE_PRODUCT_NUMBER=\"${common.argocli-image-product-number}\"
        ARGO_CLI_IMAGE_PRODUCT_TITLE=\"${common.docker-image-title} Argo Workflow CLI\"
        ARGO_CLI_IMAGE_NAME_INTERNAL=\"${var.image-full-name-internal}-argocli:${var.version}\"
        ARGO_CLI_IMAGE_NAME=\"${var.image-full-name}-argocli:${var.version}\"
        ARGO_CLI_USER_ID=\"${argocli-user-id}\"

        ML_PIPELINE_INIT_IMAGE_PRODUCT_NUMBER=\"${common.init-image-product-number}\"
        ML_PIPELINE_INIT_IMAGE_PRODUCT_TITLE=\"${common.docker-image-title} Init\"
        ML_PIPELINE_INIT_IMAGE_NAME_INTERNAL=\"${var.image-full-name-internal}-init:${var.version}\"
        ML_PIPELINE_INIT_IMAGE_NAME=\"${var.image-full-name}-init:${var.version}\"
        ML_PIPELINE_INIT_USER_ID=\"${init-user-id}\"
        MC_VERSION=\"${minio_mc_version}\"


env:
    - HOME
    - PWD

    # Docker
    - BUILDKIT_PROGRESS (default=plain)
    - DOCKER_BUILDKIT (default=1)

    # Default docker image tags
    - MVN_BUILDER_TAG (default=latest)
    - RELEASE_AUTO_TAG (default=latest)
    - IMAGE_DR_CHECK_TAG (default=latest)
    - HELM_DR_CHECK_TAG (default=latest)
    - GO_BUILDER_TAG (default=latest)
    - CI_TOOLKIT_TAG (default=latest)

    # Credentials
    - SELI_ARTIFACTORY_REPO_USER
    - SELI_ARTIFACTORY_REPO_PASS
    - SELI_ARTIFACTORY_REPO_API_KEY
    - GERRIT_USERNAME
    - GERRIT_PASSWORD
    - EMAIL (default=mxecifunc@ericsson.com)
    - ARM_API_TOKEN
    - SERO_ARM_TOKEN #SERO ARM KEY for CBOS Check
    - SERO_ARM_USER (default=mxecifunc)

    # Build Parameters
    - MAVEN_OPTS (default=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn)
    - MAVEN_CLI_OPTS (default=-Duser.home=${env.HOME} -B)
    - DOCKER_VOLUME_MAPPING_PASSWD (default=--volume ${env.HOME}/mypasswd:/etc/passwd:ro)
    - GERRIT_CHANGE_NUMBER

    - CI_USER (default=mxecifunc)

    # Go
    - GO111MODULE (default="on")
    - CGO_ENABLED (default="on")
    - GOOS (default="linux")
    - GO_ARCH (default="amd64")
    - GOPATH (default="$PWD/build/go")

var:
    - image-full-name-internal
    - image-full-name
    - version
    - commithash
    - rstate
    - helm-chart-repo-internal
    - image-repopath-drop
    - version-prefix
    - image-repopath-internal
    - image-dr-vm-args
    - helm-chart-check-report-warnings
    - cbos-version
    - cbos-semver
    - git-commit 
    - git-tag
    - git-tree-state
    - image-build-date

rules:
    # Clean workspace
    clean:
        - task: rm
          cmd:
              - rm -rf build/

    init:
        - task: image-dr-vm-args
          cmd: echo ${disabled-images-design-rules} > .bob/var.image-dr-vm-args

    lint-license-check:
        - task: license-check
          docker-image: adp-maven-builder
          docker-flags: 
              - "--env HOME=${env.HOME}"
              - "--volume ${env.HOME}:${env.HOME}"      
          cmd: mvn -X license:check

    add-missing-license:
        - task: license-check
          docker-image: adp-maven-builder
          docker-flags: 
              - "--env HOME=${env.HOME}"
              - "--volume ${env.HOME}:${env.HOME}"      
          cmd: mvn -X license:format

    download-stdout-redirect:
      - task: verify-stdout-redirect-version
        docker-image: ci-toolkit
        docker-envs:
          - ARM_API_TOKEN
          - CI_USER=${env.CI_USER}
        cmd: bash ${env.PWD}/ci/scripts/validate-stdout-redirect-version.sh ${stdout-redirect-version}
      - task: download-stdout-redirect
        docker-image: ci-toolkit
        docker-envs: 
          - ARM_API_TOKEN
        cmd: 
        - bash ${env.PWD}/ci/scripts/download_artifact.sh ${stdout-redirect-package-url} ${env.PWD}/build/stdout-redirect/

    image:
    - rule: setup
    - rule: image-bake 
    - rule: image-dr-check

    image-bake:
    - task: write-config
      cmd: 
        - echo $(date -u +'%Y-%m-%dT%H:%M:%SZ') > .bob/var.image-build-date
        - printf "%s" "${docker-bake-params}" > .bob/dynamic-params.hcl 
    - task: bake-images 
      cmd: docker buildx bake --load -f ${env.PWD}/images/docker-bake.hcl -f .bob/dynamic-params.hcl --progress plain

    setup:
        - rule: download-stdout-redirect
        - task: clone-repo 
          cmd: bash -c '''
                set -eux -o pipefail;
                ${env.PWD}/ci/scripts/clone.sh --repoURL ${argowf-repo-url} --version ${argowf-version} --clone-to ${common.argowf-path};
                cd ${common.argowf-path};
                echo $(git rev-parse HEAD || echo unknown) > ${env.PWD}/.bob/var.git-commit;
                echo $(git describe --exact-match --tags --abbrev=0  2> /dev/null || echo untagged) > ${env.PWD}/.bob/var.git-tag;
                echo $(if [ -z "`git status --porcelain`" ]; then echo "clean" ; else echo "dirty"; fi) > ${env.PWD}/.bob/var.git-tree-state;'''

    image-dr-check: 
      - task: dr-check
        docker-image: adp-image-dr-check
        docker-in-docker: socket
        cmd:
        - mkdir -p ${image-checker-report-path}/argocli ${image-checker-report-path}/argoexec ${image-checker-report-path}/workflow-controller
        - image-dr-check --image "${var.image-full-name-internal}-argocli:${var.version}" --output ${image-checker-report-path}/argocli ${var.image-dr-vm-args}
        - image-dr-check --image "${var.image-full-name-internal}-argoexec:${var.version}" --output ${image-checker-report-path}/argoexec ${var.image-dr-vm-args}
        - image-dr-check --image "${var.image-full-name-internal}-workflow-controller:${var.version}" --output ${image-checker-report-path}/workflow-controller ${var.image-dr-vm-args}
        - image-dr-check --image "${var.image-full-name-internal}-init:${var.version}" --output ${image-checker-report-path}/init ${var.image-dr-vm-args}
      
      - task: cbo-check
        docker-image: adp-release-auto
        docker-in-docker: socket
        docker-envs:
          - ARM_API_TOKEN
          - SERO_ARM_TOKEN
        docker-flags:
          - --user root
        cmd: 
        - cbo-check --debug --image "${var.image-full-name-internal}-argocli:${var.version}" --report ${image-checker-report-path}
        - cbo-check --debug --image "${var.image-full-name-internal}-argoexec:${var.version}" --report ${image-checker-report-path}
        - cbo-check --debug --image "${var.image-full-name-internal}-workflow-controller:${var.version}" --report ${image-checker-report-path}
        - cbo-check --debug --image "${var.image-full-name-internal}-init:${var.version}" --report ${image-checker-report-path}

    # Push image to ci-internal repo and create local version of helm chart
    image-push-internal:
        - task: image-push-internal
          cmd:
            - docker push ${var.image-full-name-internal}-argocli:${var.version}
            - docker push ${var.image-full-name-internal}-argoexec:${var.version}
            - docker push ${var.image-full-name-internal}-workflow-controller:${var.version}
            - docker push ${var.image-full-name-internal}-init:${var.version}

    image-push:
        - task: push-public
          cmd:
              - docker push ${var.image-full-name}-argocli:${var.version}
              - docker push ${var.image-full-name}-argoexec:${var.version}
              - docker push ${var.image-full-name}-workflow-controller:${var.version}
              - docker push ${var.image-full-name}-init:${var.version}

    # Delete docker images created
    image-delete: 
    - task: delete 
      cmd: bash -c '''
        set -ex; 
        images=("${var.image-full-name-internal}-argocli:${var.version}" 
                "${var.image-full-name}-argocli:${var.version}"
                "${var.image-full-name-internal}-argoexec:${var.version}" 
                "${var.image-full-name}-argoexec:${var.version}"
                "${var.image-full-name-internal}-workflow-controller:${var.version}" 
                "${var.image-full-name}-workflow-controller:${var.version}"
                "${var.image-full-name-internal}-init:${var.version}"
                "${var.image-full-name}-init:${var.version}");

        for image in "${images[@]}"; do
          docker image remove --force $image || true;
        done;
        for image in $(docker images -f "dangling=true" -q); do
          docker image remove --force $image || true;
        done;'''

    update-argowf-in-ml-pipeline:
      - task: clone-ml-pipeline
        cmd: ${env.PWD}/ci/scripts/clone.sh --repoURL "${ml-pipeline-repo-url}" --version "${ml-pipeline-version}" --clone-to "${ml-pipeline-path}"
      - task: update-files
        docker-image: ci-toolkit
        cmd: ${env.PWD}/ci/scripts/update_files.sh "${ml-pipeline-path}" ${var.image-full-name}:${var.version}  "${changed-files}"
      - task: update-version
        docker-image: adp-release-auto
        docker-in-docker: socket
        docker-envs:
          - GERRIT_USERNAME
          - GERRIT_PASSWORD
          - EMAIL
        cmd: 
          - ${env.PWD}/ci/scripts/create_change.sh "${ml-pipeline-path}" "${changed-files}" "${var.version}"



